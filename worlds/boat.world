<?xml version="1.0" ?>
<xacro:property name="PI" value="3.1415926535897931"/>
<xacro:property name="chassisHeight" value="1"/>
<xacro:property name="chassisLength" value="1"/>
<xacro:property name="chassisWidth" value="1"/>
<xacro:property name="chassisMass" value="50"/>
<sdf version="1.5">
  <world name="default">
    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>
<!--     <include>
      <uri>model://water_level</uri>
    </include> -->
    <include>
      <uri>model://ocean</uri>
    </include>
    <model name="test">
    <pose>10 0 0 0 0 0.4</pose>
     <include>
        <uri>model://test</uri>
      </include>
    </model>
    <model name="boat">
    <pose>0 0 0 0 0 0.4</pose>
     <include>
        <uri>model://boat</uri>
      </include>
               <!-- add new camera -->
      <link name='camera'>
        <pose>0 -0.01 2.0 1.91986 0 1.57</pose>
        <inertial>
          <pose>0 0 0 0 0 0</pose>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.001</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.001</iyy>
            <iyz>0</iyz>
            <izz>0.001</izz>
          </inertia>
        </inertial>
        <visual name='visual'>
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>0944
              <radius>0.025</radius>
              <length>0.025</length>
            </cylinder>
          </geometry>
           <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>

          <sensor name="camera" type="camera">
              <pose>0 0 0 -1.57 -1.57 0</pose>
              <camera>
                <horizontal_fov>1.0472</horizontal_fov>
                <image>
                  <width>640</width>
                  <height>480</height>
                </image>
                <clip>
                  <near>0.05</near>
                  <far>1000</far>
                </clip>
              </camera>
              <always_on>1</always_on>
              <update_rate>10</update_rate>
              <visualize>true</visualize>

             <!--  <plugin name="irlock" filename="libArduCopterIRLockPlugin.so">
                  <fiducial>irlock_beacon_01</fiducial>
              </plugin> -->
              <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
              <alwaysOn>true</alwaysOn>
              <updateRate>0.0</updateRate>
              <cameraName>webcam</cameraName>
              <imageTopicName>image_raw</imageTopicName>
              <cameraInfoTopicName>camera_info</cameraInfoTopicName>
              <frameName>camera_link</frameName>
              <hackBaseline>0.07</hackBaseline>
              <distortionK1>0.0</distortionK1>
              <distortionK2>0.0</distortionK2>
              <distortionK3>0.0</distortionK3>
              <distortionT1>0.0</distortionT1>
              <distortionT2>0.0</distortionT2>
          </plugin>

        </sensor>

      </link>

      <!-- attach camera -->
      <joint type="revolute" name="base_camera_joint">
        <pose>0 0 0.0 0 0 0</pose>
        <parent>boat::base_link</parent>
        <child>camera</child>
        <axis>
          <limit>
            <lower>0</lower>
            <upper>0</upper>
          </limit>
          <xyz>0 0 1</xyz>
          <use_parent_model_frame>true</use_parent_model_frame>
        </axis>
      </joint>

      <!--add lidar-->
        <link name="hokuyo_link">
          <pose>1.6 0 0.4 0 0 -1.57</pose>
          <collision name="collision">
            <pose>0 0 0.3 0 0 0</pose>
            <geometry>
              <box>
                <size>0.1 0.1 0.1</size>
              </box>
            </geometry>
          </collision>
          <visual name="visual">
            <pose>0 0 0.27 0 0 0</pose>
            <geometry>
              <mesh>
                <uri>model://hokuyo/meshes/hokuyo.dae</uri>
              </mesh>
            </geometry>
          </visual>
          <inertial>
            <mass>0.016</mass>
            <inertia>
               <ixx>0.0001</ixx>
               <ixy>0</ixy>
               <ixz>0</ixz>
               <iyy>0.0001</iyy>
               <iyz>0</iyz>
               <izz>0.0001</izz>
               <!-- low intertia necessary to avoid not disturb the drone -->
            </inertia>
          </inertial>

          <sensor type="ray" name="laser">
            <pose>0 0 0.3 0 0 1.57</pose>
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <ray>
              <scan>
                <horizontal>
                  <samples>1024</samples>
                  <resolution>1</resolution>
                  <min_angle>-2.35619449</min_angle>
                  <max_angle>2.35619449</max_angle>
                </horizontal>
              </scan>
              <range>
                <min>0.1</min>
                <max>30</max>
                <resolution>0.1</resolution>
              </range>
              <!-- <noise>
                <type>Gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
              </noise> -->
            </ray>
            <plugin name="hokuyo_node" filename="libgazebo_ros_laser.so">
              <robotNamespace></robotNamespace>
              <topicName>/laser/scan</topicName>
              <frameName>/hokuyo_sensor_link</frameName>
            </plugin>
          </sensor>
        </link>

        <joint name="hokuyo_joint" type="fixed">
          <pose>0 0 0 0 0 0</pose>
          <parent>boat::base_link</parent>
          <child>hokuyo_link</child>
        </joint>


        <link name="front_realsense" >
          <pose>0 0 0 0 0 0</pose>
          <sensor type="depth" name="front_realsense_depth">
            <update_rate>30</update_rate>
            <camera>
              <!--75x65 degree FOV for the depth sensor -->
              <horizontal_fov>1.5184351666666667</horizontal_fov>
              <vertical_fov>1.0122901111111111</vertical_fov>

              <image>
                <width>640</width>
                <height>480</height>
                <format>RGB8</format>
              </image>
              <clip>
                <!--give the color sensor a maximum range of 50m so that the simulation renders nicely -->
                <near>0.01</near>
                <far>50.0</far>
              </clip>
            </camera>
          <plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
            <baseline>0.2</baseline>
            <alwaysOn>true</alwaysOn>
            <updateRate>30</updateRate>
            <cameraName>realsense</cameraName>
            <imageTopicName>color/image_raw</imageTopicName>
            <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
            <depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
            <depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
            <pointCloudTopicName>depth/color/points</pointCloudTopicName>
            <frameName>front_realsense_gazebo</frameName>
            <pointCloudCutoff>0.105</pointCloudCutoff>
            <pointCloudCutoffMax>8.0</pointCloudCutoffMax>
            <distortionK1>0.00000001</distortionK1>
            <distortionK2>0.00000001</distortionK2>
            <distortionK3>0.00000001</distortionK3>
            <distortionT1>0.00000001</distortionT1>
            <distortionT2>0.00000001</distortionT2>
            <CxPrime>0</CxPrime>
            <Cx>0</Cx>
            <Cy>0</Cy>
            <focalLength>0</focalLength>
            <hackBaseline>0</hackBaseline>
          </plugin>
        </sensor>
        
        </link>

        
        <link name="front_realsense_gazebo" />

        <joint name="front_realsense_gazebo_joint" type="fixed">
          <parent>front_realsense</parent>
          <child>front_realsense_gazebo</child>
          <pose>0.5-0.02 0 0.5+0.11 -1.5707963267948966 0 -1.5707963267948966</pose>
        </joint>



        <link name="front_realsense_lens">
          <visual name="visual">
            <pose> 0.02 0 1.7 1.57 0 1.57 </pose>
            <geometry>
            <mesh>
              <uri>model://boat/meshes/d435.dae</uri>
            </mesh>
            </geometry>
            <!--material name="white" /-->
          </visual>
        </link>

        <joint type="fixed" name="front_realsense_lens_joint">
          <!-- Offset the camera 2cm backwards and 1cm up-->
          <pose>0.5-0.02 0 0.5+0.11 0 0 0</pose>
          <parent>boat::base_link</parent>
          <child>front_realsense_lens</child>
        </joint>
        <joint type="fixed" name="front_realsense_joint">
          <pose> 0.5-0.025 0 0.5+0.1 0 0 0 </pose>
          <parent>front_realsense_lens</parent>
          <child>front_realsense</child>
        </joint>
      </model>

     <physics name='default_physics' default='0' type='ode'>
<!--       <gravity>0 0 -9.8066</gravity>
      <ode>
        <solver>
          <type>quick</type>
          <iters>10</iters>
          <sor>1.3</sor>
          <use_dynamic_moi_rescaling>0</use_dynamic_moi_rescaling>
        </solver>
        <constraints>
          <cfm>0</cfm>
          <erp>0.2</erp>
          <contact_max_correcting_vel>100</contact_max_correcting_vel>
          <contact_surface_layer>0.001</contact_surface_layer>
        </constraints>
      </ode>
      <max_step_size>0.004</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>0</real_time_update_rate>
      <magnetic_field>6.0e-6 2.3e-5 -4.2e-5</magnetic_field> -->
       <ode>
        <solver>
          <type>quick</type>
          <iters>100</iters>
          <sor>1.0</sor>
        </solver>
        <constraints>
          <cfm>0.0</cfm>
          <erp>0.9</erp>
          <contact_max_correcting_vel>0.1</contact_max_correcting_vel>
          <contact_surface_layer>0.0</contact_surface_layer>
        </constraints>
      </ode>
      <real_time_update_rate>-1</real_time_update_rate>
    </physics>
  </world>
</sdf>
